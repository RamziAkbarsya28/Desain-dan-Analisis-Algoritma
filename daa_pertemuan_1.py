# -*- coding: utf-8 -*-
"""DAA Pertemuan 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mWUsIcbxThiu93n4Fc1TBT3IzMLg8HP7
"""

# 1. Pencarian Buku di Perpustakaan Digital
def linear_search(data, target):
    for i in range(len(data)):
        if data[i] == target:
            return i
    return -1

def binary_search(data, target):
    left, right = 0, len(data) - 1
    while left <= right:
        mid = (left + right) // 2
        if data[mid] == target:
            return mid
        elif data[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1


# 2. Mencari Rute Tercepat (BFS sederhana pada graf)
from collections import deque

def bfs_shortest_path(graph, start, goal):
    visited = set()
    queue = deque([[start]])
    while queue:
        path = queue.popleft()
        node = path[-1]
        if node == goal:
            return path
        elif node not in visited:
            for neighbour in graph.get(node, []):
                new_path = list(path)
                new_path.append(neighbour)
                queue.append(new_path)
            visited.add(node)
    return None


# 3. Validasi NIM Mahasiswa
def validasi_nim(nim):
    return len(nim) == 10 and nim.isdigit()


# --- Contoh Uji Coba ---
# Pencarian Buku
data_buku = [1001, 1002, 1003, 1004, 1005]
print("Binary Search cari 1003:", binary_search(data_buku, 1003))

# Rute Tercepat
graf_kampus = {
    "A": ["B", "C"],
    "B": ["D"],
    "C": ["D", "E"],
    "D": ["F"],
    "E": ["F"],
    "F": []
}
print("Rute tercepat A ke F:", bfs_shortest_path(graf_kampus, "A", "F"))

# Validasi NIM
print("Validasi NIM 2022071040:", validasi_nim("2022071040"))
print("Validasi NIM 12345:", validasi_nim("12345"))